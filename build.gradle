// Adapted from https://github.com/tantikristanti/grobid-medical-report

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.0'
        classpath 'com.adarshr:gradle-test-logger-plugin:2.0.0'
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.0"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://jitpack.io" }
    flatDir {
        dirs 'localLibs'
    }
}

apply plugin: 'java-library'
apply plugin: 'base'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

task install(dependsOn: publishToMavenLocal)

dependencies {
    implementation(group: 'xml-apis', name: 'xml-apis') {
        // otherwise xml-apis 2.0.1 will come from XOM and will result in
        // java.lang.ClassNotFoundException: org.w3c.dom.ElementTraversal
        version {
            strictly '1.4.01'
        }
    }

    //Unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.easymock:easymock:4.0.2'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    testImplementation 'org.powermock:powermock-api-easymock:2.0.7'
    testImplementation 'xmlunit:xmlunit:1.6'


    //GROBID (.m2/repository/org/grobid/)
    implementation 'org.grobid:grobid-core:0.7.1-SNAPSHOT'
    implementation 'org.grobid:grobid-trainer:0.7.1-SNAPSHOT'
    implementation ('org.grobid:grobid-service:0.7.1-SNAPSHOT')
    implementation ('org.grobid:grobid-ner:0.7.0'){
        transitive = false
    }

    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.googlecode.clearnlp:clearnlp:1.3.1'

    //Apache commons
    implementation 'org.apache.commons:commons-collections4:4.1'
    implementation 'org.apache.commons:commons-lang3:3.6'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'commons-io:commons-io:2.6'
    implementation 'commons-pool:commons-pool:1.6'
    implementation 'org.apache.commons:commons-text:1.8'


    //Json
    implementation "com.fasterxml.jackson.core:jackson-core:2.10.1"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.10.1"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:2.10.1"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.1"

    // XML
    implementation 'org.codehaus.woodstox:stax2-api:3.1.4'
    implementation 'com.fasterxml.woodstox:woodstox-core:5.1.0'

    // Needed for compatibility with JDK > 8
    implementation 'javax.activation:activation:1.1.1'

    //Web interface
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:2.27'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.27'
    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.27'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.27'
    implementation 'org.glassfish.jersey.core:jersey-client:2.27'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1'

    implementation 'javax.servlet:javax.servlet-api:3.1.0'

    implementation 'javax.activation:activation:1.1.1'
    implementation 'com.google.guava:guava:16.0.1'

    implementation 'org.jvnet.mimepull:mimepull:1.6'
    implementation 'net.arnx:jsonic:1.3.5'
}

group = "org.grobid"
version = '0.0.1'
description = "Grobid-datacat is a GROBID module for extracting and automatically structuring sale catalogues."

sourceCompatibility = '1.8'
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    implementation.exclude group: "org.slf4j", module: "slf4j-jdk14"
    implementation.exclude group: 'org.slf4j', module: "slf4j-log4j12"
    implementation.exclude group: 'log4j', module: "log4j"
}

// Copy the model
task copyModels(type: Copy) {
    from "${rootDir}/resources/models"
    include "*"
    into "${rootDir}/../grobid-home/models/"
}

/*To run these tasks,
- put all the models should be under grobid/grobid-home/models
- add the definition or names of the models in the grobid/grobid-core/src/main/java/org/grobid/core/GrobidModels.java
- don't forget to add the models setting both for CRF and DeLFT models in grobid/grobid-home/config/grobid.yaml
/ */
/** Training configuration **/
def trainerTasks = [
    //Training models
    "train_monograph"             : "org.grobid.trainer.MonographTrainer"
]

trainerTasks.each { taskName, mainClassName ->
    tasks.create(name: taskName, type: JavaExec, group: 'training') {
        mainClass = mainClassName
        classpath = sourceSets.main.runtimeClasspath
    }
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

// Evaluation
// as running this command: $ ./gradlew eval_medical_report_segmenter -gH /path/to/grobid-home
task eval_datacat_segmenter(dependsOn: 'classes', type: JavaExec, group: 'modelEvaluation') {
    mainClass = 'org.grobid.trainer.DatacatTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'datacat-segmenter', '-gH', getArg('gH', '../grobid-home')
    jvmArgs '-Xmx3072m'
}

jar {
    from {
        project.configurations.runtimeClasspath.collect {
            //it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    archiveClassifier = 'onejar'
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.GrobidDatacatMain'
    }
    from sourceSets.main.output

    from {
        project.configurations.runtimeClasspath.collect {
            //it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

artifacts {
    archives jar
    archives shadowJar
}

wrapper {
    gradleVersion "7.1.1"
}

processResources {
    filesMatching('grobid-datacat-version.txt') {
        filter {
            it.replace('project.version', project.property('version'))
        }
    }
}

build.dependsOn project.getSubprojects().collect({ it.getTasks().getByName("build") })